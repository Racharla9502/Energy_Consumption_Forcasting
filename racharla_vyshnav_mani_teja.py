# -*- coding: utf-8 -*-
"""Racharla_Vyshnav_Mani_Teja.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hkc0SskgkdHP7nfsIxwQUxcppWtAFCdH

# **Step 1: Data Loading**
"""

import pandas as pd

# Step 1: Data Loading
df = pd.read_csv("global-energy-substitution.csv")

# Display the first few rows of the dataset
print(df.head())

# Method 1: Check the shape of the dataset
print("Shape of the dataset:", df.shape)

# Method 2: Check data types of each column
print("Data types of each column:")
print(df.dtypes)

# Method 3: Display basic information about the dataset
print("Basic information about the dataset:")
print(df.info())

# Method 4: Check for missing values
print("Missing values:")
print(df.isnull().sum())

# Method 5: Summary statistics
print("Summary statistics:")
print(df.describe())

"""# **Step 2: Data Cleaning**"""

# Method 1: Check for missing values
missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

# Method 2: Remove duplicates
df.drop_duplicates(inplace=True)

# Method 3: Drop rows with missing values
df_cleaned = df.dropna()

# Method 4: Handling outliers
# Example: Winsorize outliers in numerical columns
from scipy.stats.mstats import winsorize
df['Year'] = winsorize(df['Year'], limits=[0.05, 0.05])

# Method 5: Convert data types if necessary
df['Year'] = pd.to_datetime(df['Year'], format='%Y')



"""# **Step 3: Exploratory Data Analysis (EDA)**"""

# Method 1: Visualize distribution of numerical variables
import matplotlib.pyplot as plt
plt.hist(df['Year'])
plt.title('Distribution of Years')
plt.xlabel('Year')
plt.ylabel('Frequency')
plt.show()

# Method 2: Explore unique values of categorical variables
print("Unique values of 'Entity':", df['Entity'].unique())

# Method 3: Compare distributions of different variables
plt.scatter(df['Year'], df['Coal (TWh, substituted energy)'])
plt.title('Year vs Coal Consumption')
plt.xlabel('Year')
plt.ylabel('Coal Consumption (TWh)')
plt.show()

# Method 4: Explore trends over time
plt.plot(df['Year'], df['Other renewables (TWh, substituted energy)'])
plt.title('Other Renewables Consumption Over Time')
plt.xlabel('Year')
plt.ylabel('Other Renewables Consumption (TWh)')
plt.show()

"""# **Time series model using SARIMA**
*italicized text*


"""

import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from math import sqrt

# Load the dataset
url = "global-energy-substitution.csv"
df = pd.read_csv(url)

# Choose 'Solar (TWh, substituted energy)' as the target variable
target_variable = 'Solar (TWh, substituted energy)'

# Convert 'Year' column to datetime
df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# Set 'Year' column as index
df.set_index('Year', inplace=True)

# Drop unnecessary columns
columns_to_drop = ['Entity', 'Code']  # Dropping these columns as they are not used in modeling
df.drop(columns=columns_to_drop, inplace=True)

# Plot the time series data
plt.figure(figsize=(10, 6))
plt.plot(df[target_variable])
plt.title('Solar Energy Consumption Over Time')
plt.xlabel('Year')
plt.ylabel('Solar Energy Consumption (TWh)')
plt.grid(True)
plt.show()

# Split the data into train and test sets
train_size = int(0.8 * len(df))
train_data = df[:train_size]
test_data = df[train_size:]

# SARIMA Model
order = (1, 1, 1)  # ARIMA parameters
seasonal_order = (1, 1, 1, 12)  # Seasonal parameters

# Fit SARIMA model
model = SARIMAX(train_data[target_variable], order=order, seasonal_order=seasonal_order, enforce_stationarity=False, enforce_invertibility=False)
sarima_model = model.fit()

# Make predictions
predictions = sarima_model.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1, dynamic=False)

# Plot actual vs predicted values
plt.figure(figsize=(10, 6))
plt.plot(train_data.index, train_data[target_variable], label='Training Data')
plt.plot(test_data.index, test_data[target_variable], label='Test Data')
plt.plot(test_data.index, predictions, label='Predictions', linestyle='--')
plt.title('SARIMA Model Predictions for Solar Energy Consumption')
plt.xlabel('Year')
plt.ylabel('Solar Energy Consumption (TWh)')
plt.legend()
plt.grid(True)
plt.show()

# Evaluate the model
rmse = sqrt(mean_squared_error(test_data[target_variable], predictions))
print("Root Mean Squared Error (RMSE):", rmse)

"""# **Step 4: Feature Engineering**"""

# Method 1: Create new features based on existing ones
df['Total Renewables'] = df['Other renewables (TWh, substituted energy)'] + df['Biofuels (TWh, substituted energy)'] + df['Solar (TWh, substituted energy)'] + df['Wind (TWh, substituted energy)'] + df['Hydropower (TWh, substituted energy)']

# Method 2: Extract temporal features from 'Year'
df['Year'] = pd.to_datetime(df['Year'], format='%Y')
df['Month'] = df['Year'].dt.month
df['Quarter'] = df['Year'].dt.quarter

# Method 3: Encoding categorical variables
df_encoded = pd.get_dummies(df, columns=['Entity'])

# Method 4: Scaling numerical features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_features = scaler.fit_transform(df_encoded[['Total Renewables']])

# Method 5: Binning numerical features
df_encoded['Renewables Category'] = pd.qcut(df_encoded['Total Renewables'], q=3, labels=['low', 'medium', 'high'])

# Method 6: Extracting time-based features
df['Month'] = df['Year'].dt.month
df['Day'] = df['Year'].dt.day

"""# **Step 5: Model Building and Evaluation**"""

# Method 1: Train/Test Split
from sklearn.model_selection import train_test_split
X = df_encoded.drop(['Year'], axis=1)
y = df_encoded['Year']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Method 2: Train the model
# Example: Linear Regression
from sklearn.linear_model import LinearRegression
model = LinearRegression()
# Check for any non-numeric columns in X_train and y_train
non_numeric_columns_X = X_train.select_dtypes(exclude=['number']).columns
print("Non-numeric columns in X_train:", non_numeric_columns_X)
X_train = X_train.select_dtypes(include=['number'])
model.fit(X_train, y_train)

# Method 3: Evaluate the model
from sklearn.metrics import mean_squared_error, r2_score
X_test = X_test[X_train.columns]
y_pred = model.predict(X_test)
y_test_numeric = (y_test - y_test.min()).dt.days
mse = mean_squared_error(y_test_numeric, y_pred)
r2 = r2_score(y_test_numeric, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

# Method 4: Visualize model predictions
plt.scatter(y_test, y_pred)
plt.xlabel('True Values')
plt.ylabel('Predictions')
plt.title('True vs Predicted Values')
plt.show()

"""# ***New***

**Step 1: Data Loading**
"""

import pandas as pd

# Load the dataset
url = "global-energy-substitution.csv"
df = pd.read_csv(url)

# Display the first few rows of the dataset
print(df.head())

"""**Step 2: Data Cleaning**"""

# Convert 'Year' column to datetime
df['Year'] = pd.to_datetime(df['Year'], format='%Y')

# Drop unnecessary columns
columns_to_drop = ['Entity', 'Code']  # Dropping these columns as they are not used in modeling
df.drop(columns=columns_to_drop, inplace=True)

# Check for missing values
missing_values = df.isnull().sum()
print("Missing Values:")
print(missing_values)

# Drop rows with missing values
df.dropna(inplace=True)

"""**Step 3: Feature Engineering**"""

# Method 1: Create new features based on existing ones
df['Total Renewables'] = (
    df['Other renewables (TWh, substituted energy)'] +
    df['Biofuels (TWh, substituted energy)'] +
    df['Solar (TWh, substituted energy)'] +
    df['Wind (TWh, substituted energy)'] +
    df['Hydropower (TWh, substituted energy)']
)

# Method 2: Extract temporal features from 'Year'
df['Month'] = df['Year'].dt.month
df['Quarter'] = df['Year'].dt.quarter

# Method 3: Encoding categorical variables (Note: 'Entity' has been dropped, skipping this step)

# Method 4: Scaling numerical features
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df['Total Renewables Scaled'] = scaler.fit_transform(df[['Total Renewables']])

# Method 5: Binning numerical features
df['Renewables Category'] = pd.qcut(df['Total Renewables'], q=3, labels=['low', 'medium', 'high'])

# Check the resulting DataFrame
print(df.head())

"""**Step 4: Time Series Model Building using SARIMA**"""

import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_squared_error
from math import sqrt

# Plot the time series data for 'Total Renewables'
plt.figure(figsize=(10, 6))
plt.plot(df['Year'], df['Total Renewables'])
plt.title('Total Renewables Consumption Over Time')
plt.xlabel('Year')
plt.ylabel('Total Renewables Consumption (TWh)')
plt.grid(True)
plt.show()

# Split the data into train and test sets
train_size = int(0.8 * len(df))
train_data = df[:train_size]
test_data = df[train_size:]

# SARIMA Model
order = (1, 1, 1)  # ARIMA parameters
seasonal_order = (1, 1, 1, 12)  # Seasonal parameters

# Fit SARIMA model
model = SARIMAX(train_data['Total Renewables'], order=order, seasonal_order=seasonal_order, enforce_stationarity=False, enforce_invertibility=False)
sarima_model = model.fit()

# Make predictions
predictions = sarima_model.predict(start=len(train_data), end=len(train_data) + len(test_data) - 1, dynamic=False)

# Plot actual vs predicted values with clear representation
plt.figure(figsize=(10, 6))
plt.plot(train_data.index, train_data['Total Renewables'], label='Training Data', color='blue')
plt.plot(test_data.index, test_data['Total Renewables'], label='Test Data', color='green')
plt.plot(test_data.index, predictions, label='Predictions', linestyle='--', color='red')
plt.scatter(test_data.index, test_data['Total Renewables'], color='green')
plt.scatter(test_data.index, predictions, color='red')
plt.title('SARIMA Model Predictions for Total Renewables Consumption')
plt.xlabel('Year')
plt.ylabel('Total Renewables Consumption (TWh)')
plt.legend()
plt.grid(True)
plt.show()

# Evaluate the model
rmse = sqrt(mean_squared_error(test_data['Total Renewables'], predictions))
print("Root Mean Squared Error (RMSE):", rmse)